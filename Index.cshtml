@page
@model IndexModel
@{
    ViewData["Title"] = "My Dashboard";
}
@* 
We used ChatGPT a lot for the Dashboard page, especially for writing the CSS and JavaScript 
since we didn’t know how to do that ourselves. 

Most of the layout ideas and design goals came from us — we figured out what we wanted 
and asked the right questions. 

ChatGPT handled most of the code, but we stayed involved the whole time 
and made all the final decisions. 

Chat wrote this citation based on our conversations.
*@


@if (!string.IsNullOrEmpty(Model.UserFirst) && !string.IsNullOrEmpty(Model.UserLast))
{
    <div class="text-center my-4">
        <h2 class="fw-bold mb-1">Welcome, @Model.UserFirst @Model.UserLast!</h2>
        <h6 class="text-muted mb-2">@Model.UserRole</h6>
        
    </div>
}
else
{
    <div class="text-center my-4">
        <h2 class="fw-bold mb-1">Welcome!</h2>
        <p class="lead text-muted">
            Please <a asp-page="/Login/ParameterizedLogin">sign in</a> to view your personalized dashboard and important dates/deadlines.
        </p>
    </div>
}


<div class="container-fluid px-1">
    <div class="row gx-2 gy-4 flex-wrap align-items-start">
        <!-- LEFT COLUMN: Calendar -->
        <div class="col-xl-6.5 col-lg-7 col-md-12">
            <div class="card shadow-sm">
                <div class="card-body">
                    <h2 class="text-center mb-3" id="calendarTitle"></h2>
                    <div class="calendar-grid border w-100" id="calendarGrid"></div>
                </div>
            </div>
        </div>

        <!-- RIGHT COLUMN: Project Tasks + Grants -->
        <div class="col-xl5 col-lg-5 col-md-12">
            <div class="d-flex flex-column gap-4">
                <!-- Project Tasks Box -->
                <div class="card shadow-sm">
                    <div class="card-header bg-light fw-bold">
                        @($"{Model.UserFirst} {Model.UserLast}'s Project Tasks")
                    </div>
                    <div class="card-body text-wrap overflow-hidden">
                        <h6>Completed Tasks</h6>
                        <div class="progress rounded-pill mb-2" style="height: 28px;">
                            <div class="progress-bar bg-info"
                                 role="progressbar"
                                 style="width: @Model.CompletionPercent%; font-weight: 500;"
                                 aria-valuenow="@Model.CompletionPercent"
                                 aria-valuemin="0"
                                 aria-valuemax="100">
                                @Model.CompletionPercent%
                            </div>
                        </div>
                        <small class="text-muted">(@Model.CompletionPercent% complete)</small>

                        @if (Model.UserTasks != null && Model.UserTasks.Count > 0)
                        {
                            <div class="mt-3">
                                <h6>Assigned Tasks</h6>
                                <ul class="list-group">
                                    @foreach (var task in Model.UserTasks)
                                    {
                                        bool isComplete = !string.IsNullOrEmpty(task.Status) && task.Status.ToLower().Contains("complete");
                                        bool isHighPriority = !string.IsNullOrEmpty(task.Priority) && task.Priority.ToLower() == "high";
                                        string checkbox = isComplete ? "✅" : "⬜";
                                        string flag = isHighPriority ? "<span title='High Priority'>🚩</span>" : "";
                                        string textStyle = isComplete ? "text-decoration-line-through text-muted" : "";

                                        <li class="list-group-item d-flex align-items-start px-2 py-1 small flex-wrap">
                                            <span class="me-2 mt-1">@checkbox</span>
                                            <div class="@textStyle" style="flex-grow: 1; line-height: 1.3;">
                                                <div class="fw-semibold">Task: @task.Title @Html.Raw(flag)</div>
                                                <div class="fst-italic text-muted" style="font-size: 0.75rem;">
                                                    Project: @task.ProjectTitle | Due: @task.Due_Date?.ToString("MMM d")
                                                </div>
                                            </div>
                                        </li>
                                    }
                                </ul>
                            </div>
                        }
                        else
                        {
                            <p class="text-muted mt-3">No tasks assigned at the moment.</p>
                        }
                    </div>
                </div>

                <!-- Grants Box -->
                <div class="card shadow-sm">
                    <div class="card-header bg-light fw-bold">
                        @($"{Model.UserFirst} {Model.UserLast}'s Grants")
                    </div>
                    <div class="card-body">
                        @if (Model.AssignedGrants != null && Model.AssignedGrants.Count > 0)
                        {
                            
                            <div class="d-flex flex-column gap-4">
                                @foreach (var grant in Model.AssignedGrants)
                                {
                                    <div class="grant-box">
                                        <div class="fw-semibold mb-2">@grant.Title: <span class="text-muted">Status</span></div>

                                        @{
                                            var statuses = new[] { "opportunity", "draft", "applied", "pending", "awarded", "rejected", "completed" };
                                            var statusValue = grant.Status?.ToLower()?.Trim();
                                            var showStatus = !string.IsNullOrEmpty(statusValue) && statusValue != "n/a";
                                            var currentIndex = Array.IndexOf(statuses, statusValue ?? "");
                                        }

                                        @if (showStatus)
                                        {
                                            <div class="grant-status-wrapper">
                                                <div class="grant-status-labels grant-labels-top">
                                                    @for (int i = 0; i < statuses.Length; i++)
                                                    {
                                                        <div class="label-item">
                                                            @(i % 2 == 0 ? statuses[i] : "")
                                                        </div>
                                                    }
                                                </div>

                                                <div class="grant-status-line">
                                                    @for (int i = 0; i < statuses.Length; i++)
                                                    {
                                                        var isFilled = i <= currentIndex;
                                                        var circleClass = isFilled ? "filled" : "empty";

                                                        <div class="status-step">
                                                            <div class="circle @circleClass" title="@statuses[i]"></div>
                                                            @if (i < statuses.Length - 1)
                                                            {
                                                                <div class="line"></div>
                                                            }
                                                        </div>
                                                    }
                                                </div>

                                                <div class="grant-status-labels grant-labels-bottom">
                                                    @for (int i = 0; i < statuses.Length; i++)
                                                    {
                                                        <div class="label-item">
                                                            @(i % 2 != 0 ? statuses[i] : "")
                                                        </div>
                                                    }
                                                </div>
                                            </div>
                                        }
                                        else
                                        {
                                            <p class="text-muted fst-italic mt-3">Status not available for this grant.</p>
                                        }
                                    </div>

                                }
                            </div>
                        }
                        else
                        {
                            <p class="text-muted">No grants assigned to you yet.</p>
                        }
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>



@section Scripts {
    <script>
        const upcomingDates = @Html.Raw(Json.Serialize(Model.UpcomingDates.Select(d => new
            {
                date = d.Date.ToString("yyyy-MM-dd"),
                type = d.DateType,
                description = d.Description
            })));
    </script>
    <script>
        const today = new Date();
        const currentMonth = today.getMonth();
        const currentYear = today.getFullYear();
        const firstDay = new Date(currentYear, currentMonth, 1).getDay();
        const daysInMonth = new Date(currentYear, currentMonth + 1, 0).getDate();
        const dayNames = ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'];

        const calendarGrid = document.getElementById('calendarGrid');
        const calendarTitle = document.getElementById('calendarTitle');
        const monthName = today.toLocaleString('default', { month: 'long' });
        calendarTitle.textContent = `${monthName} ${currentYear}`;

        dayNames.forEach(day => {
            const dayEl = document.createElement('div');
            dayEl.className = 'day-name';
            dayEl.textContent = day;
            calendarGrid.appendChild(dayEl);
        });

        for (let i = 0; i < firstDay; i++) {
            const empty = document.createElement('div');
            calendarGrid.appendChild(empty);
        }

        for (let i = 1; i <= daysInMonth; i++) {
            const dateEl = document.createElement('div');
            dateEl.className = 'date-cell';
            const thisDate = new Date(currentYear, currentMonth, i);
            const isoDate = thisDate.toISOString().split('T')[0];
            const dayNumber = document.createElement('strong');
            dayNumber.textContent = i;
            dateEl.appendChild(dayNumber);

            if (i === today.getDate() && currentMonth === today.getMonth() && currentYear === today.getFullYear()) {
                dateEl.classList.add('today');
            }

            const eventsOnThisDate = upcomingDates.filter(event => event.date === isoDate);

            if (eventsOnThisDate.length > 0) {
                dateEl.classList.add('has-event');
                eventsOnThisDate.forEach(event => {
                    const eventBox = document.createElement('div');
                    eventBox.className = 'event-box';

                    const typeEl = document.createElement('div');
                    typeEl.className = 'event-type';
                    typeEl.textContent = event.type;

                    const descEl = document.createElement('div');
                    descEl.className = 'event-desc';

                    const parts = event.description.split(':');
                    if (parts.length >= 2) {
                        const boldPart = document.createElement('strong');
                        boldPart.textContent = parts[0] + ':';
                        const rest = document.createTextNode(parts.slice(1).join(':'));
                        descEl.appendChild(boldPart);
                        descEl.appendChild(rest);
                    } else {
                        descEl.textContent = event.description;
                    }

                    eventBox.appendChild(typeEl);
                    eventBox.appendChild(descEl);
                    dateEl.appendChild(eventBox);
                });
            }

            calendarGrid.appendChild(dateEl);
        }
    </script>
}

<style>
    .calendar-grid {
        display: grid;
        grid-template-columns: repeat(7, 1fr);
        gap: 8px;
        text-align: center;
        font-family: 'Poppins', sans-serif;
        width: 100%;
    }

    .day-name {
        font-weight: 600;
        background-color: #f8f9fa;
        padding: 10px 0;
        border: 1px solid #dee2e6;
    }

    .date-cell {
        padding: 6px;
        border: 1px solid #dee2e6;
        background-color: #fff;
        font-size: 0.8rem;
        text-align: left;
        vertical-align: top;
        min-height: 90px;
        position: relative;
    }

    .today {
        background-color: #e5d4f7;
        font-weight: bold;
        border: 2px solid #7b30c1;
    }

    .has-event {
        background-color: #f9f9f9;
    }

    .event-box {
        background-color: #fff;
        border: 1px solid #ccc;
        border-radius: 4px;
        margin-top: 4px;
        padding: 4px;
        font-size: 0.7rem;
        box-shadow: 1px 1px 3px rgba(0, 0, 0, 0.05);
    }

    .event-type {
        font-weight: 500;
        font-size: 0.7rem;
        color: #6c757d;
    }

    .event-desc {
        font-size: 0.7rem;
        color: #212529;
    }

    .grant-box {
        border: 1px solid #dee2e6;
        border-radius: 8px;
        padding: 16px 20px; /* Slightly reduced padding */
        background-color: #fff;
        box-shadow: 0 1px 3px rgba(0, 0, 0, 0.08);
        width: 100%;
        overflow-x: auto;
    }


    .grant-status-wrapper {
        width: 100%;
        overflow: visible;
        padding-top: 12px;
    }

    .grant-status-line {
        display: flex;
        align-items: center;
        justify-content: space-between;
        gap: 0;
        width: 100%;
        position: relative;
    }

    .status-step {
        display: flex;
        align-items: center;
        justify-content: center;
        flex: none;
        position: relative;
        width: 67px; /* adjust this width to fit your layout better */
    }

    .circle {
        width: 16px;
        height: 16px;
        border-radius: 50%;
        border: 2px solid #bbb;
        background-color: white;
        z-index: 2;
    }

    .filled {
        background-color: #8b5cf6;
        border-color: #6d28d9;
    }

    .line {
        flex-grow: 1;
        height: 2px;
        background-color: #bbb;
        position: absolute;
        top: 50%;
        left: 50%;
        width: 100%;
        transform: translateY(-50%);
        z-index: 1;
    }

    .grant-status-labels {
        display: flex;
        justify-content: space-between;
        width: 100%;
    }

        .grant-status-labels .label-item {
            flex: none;
            width: 67px; /* Same width as status-step */
            font-size: 0.7rem;
            text-align: center;
            color: #555;
            white-space: normal; /* Allow wrapping */
            word-break: normal;
        }

    .grant-labels-top {
        margin-bottom: 12px;
    }

    .grant-labels-bottom {
        margin-top: 12px;
    }


</style>





@* 
    
COMMENTED OUT LAB HOME PAGE

<h2>Maha Afridi, Megan Greening, Erin Harder, Wyatt Robinson, and Cristina Yauss</h2>

<p><em>This is our Lab 3 project. Please give us a good grade (we know you don't give grades we earn them but we still don't want to delete this comment)! We worked so hard and spent so many hours on this. <span style="color: red; font-weight: bold;">We really tried our best</span>. We have learned so much in the past few weeks!</em></p>

<hr />

<h3>AI Statement</h3>
<p>
    <strong>We used ChatGPT to assist with some parts of this lab.</strong> However, ChatGPT did not write a significant percentage of our code. We always tried to work through problems on our own first before asking for help.
</p>
<p>
    The main ways we used AI in this lab: 
</p>
<ul>
    <li><strong>Error Handling:</strong> When something wasn't working, we provided error screenshots and asked for debugging suggestions. We at times submitted code and asked for revisions and suggestions.</li>
    <li><strong>Concept Clarification:</strong> We asked ChatGPT to help explain examples from class so we could better understand and replicate them.</li>
    <li><strong>Code Suggestions:</strong> While some AI-generated code was reused throughout our program, we adapted suggestions to fit our needs. We added comments to acknowledge where AI assistance was used (if an AI generated code block was resused it was only cited in a comment once).</li>
    <li><strong>Formatting:</strong> ChatGPT rewrote most of the html on this intro page specifically, because my little paragraph tags just weren't cutting it.</li>
    <li><strong>GPT Projects and Knowledge:</strong> Professor Lough showed us how to use projects within Chat GPT to make prompting easier.</li>
</ul>

<p><strong>Final Note:</strong> The overall work and thought process behind our project are our own.</p>

<hr />

@* <p>You can use the navigation bar to move through our site. Please reference our document <strong>"Text Explanation"</strong> to understand how this can be used.</p> *@

@* <p><strong>You must log in to access the pages on our site.</strong> Different roles have different views and permissions:</p>

<ul>
    <li><strong>Faculty</strong>: Can see "action" buttons (edit, add, remove, etc.) for grant-related pages.</li>
    <li><strong>External Partners</strong>: Can see "action" buttons for sponsor organization-related pages.</li>
    <li><strong>Grant Org Admins</strong>: Can see "action" buttons for project-related pages.</li>
    <li><strong>Other roles</strong>: Can only view pages without editing permissions.</li>
</ul>

<hr />

<h3>Login Credentials</h3>
<p>Here are some test accounts you can use to log in under different roles:</p>

<ul>
    <li><strong>Faculty:</strong> ajohnson@jmu.edu | <code>password1</code></li>
    <li><strong>Grant Org Admin (GOAdmin):</strong> bsmith@jmu.edu | <code>password2</code></li>
    <li><strong>External Partner:</strong> cbrown@jmu.edu | <code>password3</code></li>
    <li><strong>University Admin (UAdmin):</strong> dwilliams@jmu.edu | <code>password4</code></li>
    <li><strong>Non-Faculty:</strong> ivyclark@jmu.edu | <code>password9</code></li>
</ul>

<hr />
 
 *@